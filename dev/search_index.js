var documenterSearchIndex = {"docs":
[{"location":"","page":"-","title":"-","text":"SupplyChainSimulation is a package to model and simulate supply chains. ","category":"page"},{"location":"","page":"-","title":"-","text":"The simulation is built around a loop that keeps track of orders and inventory movements:","category":"page"},{"location":"","page":"-","title":"-","text":"receive_inventory\nplace_orders\nreceive_orders\nsend_inventory","category":"page"},{"location":"","page":"-","title":"-","text":"Each step can be customized by applying different policies. The policies can also be optimized to improve the supply chain performance.","category":"page"},{"location":"","page":"-","title":"-","text":"SupplyChainSimulation can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"","page":"-","title":"-","text":"pkg> add SupplyChainSimulation","category":"page"},{"location":"","page":"-","title":"-","text":"Modules = [SupplyChainSimulation]\nOrder   = [:function, :type]","category":"page"},{"location":"#SupplyChainSimulation.eoq_cost_rate-Tuple{Any, Any, Any}","page":"-","title":"SupplyChainSimulation.eoq_cost_rate","text":"eoq_cost_rate(demand_rate, ordering_cost, holding_cost_rate)\n\nComputes the total cost per time period of ordering the economic ordering quantity.\n\nSee also [`eoq_quantity`](@ref).\n\n\n\n\n\n","category":"method"},{"location":"#SupplyChainSimulation.eoq_interval-Tuple{Any, Any, Any}","page":"-","title":"SupplyChainSimulation.eoq_interval","text":"eoq_interval(demand_rate, ordering_cost, holding_cost_rate)\n\nComputes at what interval the economic ordering quantity is ordered.\n\nSee also [`eoq_quantity`](@ref).\n\n\n\n\n\n","category":"method"},{"location":"#SupplyChainSimulation.eoq_quantity-NTuple{4, Any}","page":"-","title":"SupplyChainSimulation.eoq_quantity","text":"eoq_quantity(demand_rate, ordering_cost, holding_cost_rate, backlog_cost_rate)\n\nComputes the economic ordering quantity that minimizes overall costs (ordering costs + holding costs) while meeting  demand.\n\n\n\n\n\n","category":"method"},{"location":"#SupplyChainSimulation.eoq_quantity-Tuple{Any, Any, Any}","page":"-","title":"SupplyChainSimulation.eoq_quantity","text":"eoq_quantity(demand_rate, ordering_cost, holding_cost_rate)\n\nComputes the economic ordering quantity that minimizes overall costs (ordering costs + holding costs) while meeting  demand.\n\n\n\n\n\n","category":"method"},{"location":"#SupplyChainSimulation.get_locations-Tuple{Any}","page":"-","title":"SupplyChainSimulation.get_locations","text":"get_locations(network)\n\nGets all the locations in the network.\n\n\n\n\n\n","category":"method"},{"location":"#SupplyChainSimulation.FixedOrderingPolicy","page":"-","title":"SupplyChainSimulation.FixedOrderingPolicy","text":"Orders the same amount; no matter the scenario.\n\n\n\n\n\n","category":"type"},{"location":"#SupplyChainSimulation.NetSSOrderingPolicy","page":"-","title":"SupplyChainSimulation.NetSSOrderingPolicy","text":"Orders up to a given number based on the net number of units (on hand + in transit + on order - on backlog) if the net inventory is below a threshold.\n\n\n\n\n\n","category":"type"},{"location":"#SupplyChainSimulation.NetUptoOrderingPolicy","page":"-","title":"SupplyChainSimulation.NetUptoOrderingPolicy","text":"Orders up to a given number based on the net number of units (on hand + in transit + on order - on backlog).\n\n\n\n\n\n","category":"type"},{"location":"#SupplyChainSimulation.OnHandUptoOrderingPolicy","page":"-","title":"SupplyChainSimulation.OnHandUptoOrderingPolicy","text":"Orders up to a given number based on the number of units on hand; no matter what is on order.\n\n\n\n\n\n","category":"type"}]
}
